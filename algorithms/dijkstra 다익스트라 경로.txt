P[A][B]: A에서 B로 이동하기 위한 비용

1. 출발점으로부터의 최단거리를 저장할 배열 d[v]를 만들고, 
출발 노드에는 0을, 출발점을 제외한 다른 노드들에는 INF를 채워 넣는다. 

2. 현재 노드를 나타내는 변수 A에 출발 노드의 번호를 저장한다.

3. A로부터 갈 수 있는 임의의 노드 B에 대해, 
d[A] + P[A][B]와 d[B]의 값을 비교한다. 
INF와 비교할 경우 무조건 전자가 작다.

4. 만약 d[A] + P[A][B]의 값이 더 작다면, 즉 더 짧은 경로라면, 
d[B]의 값을 이 값으로 갱신시킨다. 이때 d[A]는 큐에서 꺼낸 값이 아닌 d배열의 최신 값이어야 한다

5. A의 모든 이웃 노드 B에 대해 이 작업을 수행한다.

6. A의 상태를 "방문 완료"로 바꾼다. 
그러면 이제 더 이상 A는 사용하지 않는다.

7. "미방문" 상태인 모든 노드들 중, 
출발점으로부터의 거리가 제일 짧은 노드 하나를 골라서 그 노드를 A에 저장한다.

8. 도착 노드가 "방문 완료" 상태가 되거나, 
혹은 더 이상 미방문 상태의 노드를 선택할 수 없을 때까지, 
3~7의 과정을 반복한다.

이 작업을 마친 뒤, 도착 노드에 저장된 값이 바로 A로부터의 최단 거리이다. 
만약 이 값이 INF라면, 중간에 길이 끊긴 것임을 의미한다.

우선순위 큐

(시작 노드 -> 해당 노드까지의 거리, 해당 노드 번호)를 원소로 가지고 거리가 짧을수록 먼저 나오는 큐를 만든다.
distance[a] = 시작 노드에서 a까지 이동하는 알려진 최소 비용
cost[a][b] = a에서 b까지 이동하는 비용

시작 노드에서 시작 노드로 이동하는 비용은 0이므로 큐에 (0, 시작노드)를 넣는다.

큐가 빌 때까지:
	큐에서 원소를 뺀다. (현재 거리, 현재 노드)
	큐에서 뺀 원소의 거리가 distance[현재 노드]보다 크다면 무시한다.
	현재 노드에서 인접한 모든 노드에 대해:
		다음 노드로 가기 위한 거리는 현재 거리 + cost[현재 노드][다음 노드]
		다음 거리 < distance[다음 노드]라면:
			distance[다음 노드]를 갱신한다.
			(다음 거리, 다음 노드)를 큐에 넣는다.
