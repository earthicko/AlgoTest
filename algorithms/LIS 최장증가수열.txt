벡터: 현재 알려진 LIS 뒤에 수를 붙일 수 있는지 체크하는 역할
	(i번째 수는 (i + 1) 길이의 LIS의 가능한 마지막 값 중 최소값)
배열: 해당 인덱스에서 가능한 LIS의 길이를 기록하는 역할
최종 인덱스 변수: LIS의 마지막 수의 인덱스를 기록

수열을 순회하며:
	벡터가 비어있다면:
		벡터에 현재 수를 넣는다. 현재 위치의 LIS 길이는 1임을 배열에 기록하고 벡터 2에 1을 넣는다.
	안 비어있다면:
		벡터의 마지막 수가 현재 수보다 크다면:
			벡터에 현재 수를 넣는다. 현재 위치의 LIS 길이는 벡터의 크기이므로 이 수를 배열에 기록한다.
			LIS를 새로 발견한 경우이므로 최종 인덱스 변수에 현재 수의 인덱스를 기록한다.
		작거나 같다면:
			벡터 내에서 현재 수의 lower_bound를 찾는다. lower bound의 인덱스를 i라 하면
			길이가 (i + 1)인 LIS의 가능한 마지막 수 중 최소값은 현재 수이므로
			벡터의 i번째 수를 현재 수로 대체한다.
			현재 위치의 LIS 길이는 i + 1이므로 이 값을 배열에 기록한다.

이 과정을 마친 후 벡터의 크기가 LIS의 길이이다.

스택을 하나 준비한다.
LIS의 길이를 L이라 하면
배열을 최종 인덱스 변수로부터 거꾸로 순회하며:
	배열의 값이 L에서 L - 1, L - 2 ... 순으로 변화하는 순간을 찾아서 해당 인덱스의 수열 값을 스택에 넣는다.

스택에서 역순으로 꺼낸 값이 LIS의 원소들이다.
