* 용어 *
대상, 패턴: 문자열 검색의 대상, 문자열 검색의 목적
경계: a b c a b에서 접두사이면서 접미사인 substring a b는 경계이다


* 상태 전이 함수 *
        a b a c a b a a c 
  j   0 1 2 3 4 5 6 7 8 9
p[j] -1 0 0 1 0 1 2 3 1 0
j: 일치하는 패턴의 길이, 패턴의 j번째 문자를 매칭
p[j]: 최대 경계 너비, j에서 문자 매칭 실패 시 j를 이동할 위치

* 상태 전이 함수표 생성 *

패턴의 길이를 n, i = -1, j = 0으로 지정한다.
n + 1의 길이를 가진 정수 배열 p를 생성한다.
p[j] = i (p[0]은 항상 -1이다)
j가 n보다 작은 동안에:
    i가 -1이거나 패턴의 i번째, j번째 문자가 같을 시 (패턴의 처음으로 돌아왔거나 매칭이 이루어질 시):
        i, j를 1씩 증가시킨다. (다음 칸으로 이동, 최대 경계 너비 증가)
        p[j] = i이다 (최대 경계 너비 지정)
    그렇지 않을 시:
        i = p[i]이다 (상태 전이 함수를 타고 위 조건을 만족할 때까지 이동)

* 문자열 탐색 *

대상의 길이를 n, 패턴의 길이를 m, i = 0, j = 0으로 한다.
i가 n보다 작은 동안에:
    j가 -1이거나 대상의 i, 패턴의 j번째 문자가 같을 시 (패턴의 처음으로 돌아왔거나 매칭이 이루어질 시):
        i, j를 1씩 증가시킨다
    그렇지 않을 시:
        j = p[j]이다 (상태 전이 함수를 타고 위 조건을 만족할 때까지 이동)
    
    위 스텝을 거친 후 j == m이라면 (패턴의 끝까지 도달 성공)
        -> 대상의 i - m + 1 위치에 패턴이 있다.
        j = p[j]이다 (상태 전이 함수를 타고 탈출)
