#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 100

typedef struct Item {
    int r, c;
} Item;
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

int N;
char MAP[N_MAX][N_MAX], MAP_RG[N_MAX][N_MAX];
const Item dir[4] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

int do_dfs(int r, int c, char map[][N_MAX], char color);

int main() {
    scanf("%d", &N);
    for (int r = 0; r < N; r++)
        for (int c = 0; c < N; c++) {
            scanf(" %c", &MAP[r][c]);
            MAP_RG[r][c] = MAP[r][c];
            if (MAP_RG[r][c] == 'G') MAP_RG[r][c] = 'R';
        }

    int n_colors = 0, n_rg_colors = 0;
    for (int r = 0; r < N; r++)
        for (int c = 0; c < N; c++) {
            if (MAP[r][c] != 'X') {
                do_dfs(r, c, MAP, MAP[r][c]);
                n_colors++;
            }
            if (MAP_RG[r][c] != 'X') {
                do_dfs(r, c, MAP_RG, MAP_RG[r][c]);
                n_rg_colors++;
            }
        }

    printf("%d %d", n_colors, n_rg_colors);
    return 0;
}

int do_dfs(int r, int c, char map[][N_MAX], char color) {
    Queue* q = Queue__init__(N_MAX * N_MAX + 2);
    Item s = {r, c};
    map[r][c] = 'X';
    Queue_push(q, s);
    while (q->n > 0) {
        Item here = Queue_pop(q);
        for (int i = 0; i < 4; i++) {
            Item there = {here.r + dir[i].r, here.c + dir[i].c};
            if (there.r < 0 || there.r >= N || there.c < 0 || there.c >= N)
                continue;
            if (map[there.r][there.c] == 'X' || map[there.r][there.c] != color)
                continue;
            map[there.r][there.c] = 'X';
            Queue_push(q, there);
        }
    }
    Queue__del__(q);
    return 0;
}

Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}