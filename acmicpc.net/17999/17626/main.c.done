#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 50001
typedef struct Item {
    int s, d;
} Item;
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
Item Queue_peek(Queue* this, int i);
int Queue_resize(Queue* this, int cap_);
int SQ[225], MIN_STEPS[N_MAX], VISITED[N_MAX];
int N, MAX_SQ;

int do_bfs(int start);

int main() {
    scanf("%d", &N);
    MAX_SQ = 0;
    while (SQ[MAX_SQ] <= N) {
        MAX_SQ++;
        SQ[MAX_SQ] = MAX_SQ * MAX_SQ;
    }
    for (int i = 0; i <= N; i++) MIN_STEPS[i] = __INT32_MAX__;
    do_bfs(N);
    printf("%d", MIN_STEPS[0]);

    return 0;
}

int do_bfs(int start) {
    Queue* q = Queue__init__(N_MAX);
    Item start_node = {start, 0};
    Queue_push(q, start_node);
    VISITED[start] = 1;
    MIN_STEPS[start] = 0;
    while (q->n > 0) {
        Item here = Queue_pop(q);
        if (MIN_STEPS[here.s] > here.d) MIN_STEPS[here.s] = here.d;

        for (int i = MAX_SQ; i >= 1; i--) {
            if (here.s < SQ[i]) continue;
            Item next = {here.s - SQ[i], here.d + 1};
            if (next.d > 4) continue;
            if (VISITED[next.s]) continue;
            VISITED[next.s] = 1;
            Queue_push(q, next);
        }
    }
    return 0;
}
Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
Item Queue_peek(Queue* this, int i) {
    return this->items[(this->head + 1 + (i % this->n)) % this->cap];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}