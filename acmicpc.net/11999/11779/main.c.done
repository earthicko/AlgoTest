#include <stdio.h>
#include <stdlib.h>

typedef long long ll;

typedef struct Node {
    int i;
    ll d;
} Node;
typedef struct Heap {
    int (*cmp)(Node*, Node*);
    int (*push)(struct Heap*, Node);
    Node (*pop)(struct Heap*);
    int n;
    int cap;
    Node* data;
} Heap;
Heap* Heap__init__(int cap_, int (*cmp_)(Node*, Node*));
int Heap__del__(Heap* this);
int Node_min_cmp(Node* a, Node* b);
int Heap_sort_from_bottom(Heap* this, int start_index);
int Heap_sort_from_top(Heap* this, int start_index);
int Heap_push(Heap* this, Node new_val);
Node Heap_pop(Heap* this);
int Heap_realloc(Heap* this, int new_cap);

#define N_MAX 1000

const ll INF = N_MAX * 100000 + 1;

int N, M;
ll BUS[N_MAX][N_MAX], BUS_REV[N_MAX][N_MAX];
ll MIN_D[N_MAX];
int VISITED[N_MAX];
int S, E;

int N_CITIES = 0;
int CITIES[N_MAX];

int trace_route(int s, ll d_remaining);

int main() {
    scanf("%d%d", &N, &M);
    for (int s = 0; s < N; s++) {
        for (int e = 0; e < N; e++) {
            BUS[s][e] = -1;
            BUS_REV[s][e] = -1;
        }
        MIN_D[s] = INF;
    }
    for (int m = 0; m < M; m++) {
        ll s, e, d;
        scanf("%lld%lld%lld", &s, &e, &d);
        s--, e--;
        if (BUS[s][e] == -1 || (BUS[s][e] > d)) {
            BUS[s][e] = d;
            BUS_REV[e][s] = d;
        }
    }
    scanf("%d%d", &S, &E);
    S--, E--;

    MIN_D[S] = 0;
    Node start = {S, 0};
    Heap* q = Heap__init__(N + 2, Node_min_cmp);
    Heap_push(q, start);

    while (q->n > 0) {
        int here = Heap_pop(q).i;
        for (int there = 0; there < N; there++) {
            if (BUS[here][there] == -1) continue;
            if (VISITED[there]) continue;
            ll new_d = MIN_D[here] + BUS[here][there];
            if (MIN_D[there] > new_d) {
                MIN_D[there] = new_d;
                Node next = {there, new_d};
                Heap_push(q, next);
            }
        }
        if (here == E) break;
        VISITED[here] = 1;
    }

    ll min_d = MIN_D[E];
    N_CITIES++;
    CITIES[0] = E;
    trace_route(E, min_d);

    printf("%lld\n", min_d);
    printf("%d\n", N_CITIES);
    for (int i = N_CITIES - 1; i >= 0; i--) printf("%d ", CITIES[i] + 1);

    return 0;
}

int trace_route(int s, ll d_remaining) {
    if (d_remaining == 0) return 0;
    for (int e = 0; e < N; e++) {
        if (BUS_REV[s][e] == -1) continue;
        if (d_remaining - BUS_REV[s][e] != MIN_D[e]) continue;
        CITIES[N_CITIES] = e;
        N_CITIES++;
        int result = trace_route(e, d_remaining - BUS_REV[s][e]);
        if (result == 0) return 0;
        N_CITIES--;
    }
    return -1;
}

Heap* Heap__init__(int cap_, int (*cmp_)(Node*, Node*)) {
    Heap* new = (Heap*)malloc(sizeof(Heap));
    new->cmp = cmp_;
    new->push = Heap_push;
    new->pop = Heap_pop;
    new->n = 0;
    new->cap = cap_;
    new->data = (Node*)malloc(sizeof(Node) * cap_);
    return new;
}
int Heap__del__(Heap* this) {
    free(this->data);
    free(this);
    return 0;
}
int Node_min_cmp(Node* a, Node* b) {
    // a > b => 1, a == b => 0, a < b => -1
    if (a->d > b->d) return 1;
    if (a->d == b->d) return 0;
    return -1;
}
int Heap_sort_from_bottom(Heap* this, int s_i) {
    if (s_i == 1) return 0;
    int parent_idx = s_i / 2;
    if (this->cmp(this->data + parent_idx, this->data + s_i) == 1) {
        // parent is bigger -> swap
        Node temp = this->data[parent_idx];
        this->data[parent_idx] = this->data[s_i];
        this->data[s_i] = temp;
        Heap_sort_from_bottom(this, parent_idx);
    }
    return 0;
}
int Heap_sort_from_top(Heap* h, int s_i) {
    int l_i = s_i * 2;
    int r_i = s_i * 2 + 1;

    Node parent, l, r;

    char swap = 0;
    if (l_i <= h->n) {
        // left child exists
        parent = h->data[s_i];
        l = h->data[l_i];
        if (r_i <= h->n) {  // right child exists
            r = h->data[r_i];
            if (h->cmp(h->data + s_i, h->data + l_i) == 1 &&
                h->cmp(h->data + s_i, h->data + r_i) == 1) {
                // both children are smaller
                if (h->cmp(h->data + r_i, h->data + l_i) >= 0)
                    swap = 1;  // swap with left child
                else
                    swap = 2;  // swap with right child
            } else if (h->cmp(h->data + s_i, h->data + l_i) == 1) {
                // only left child is smaller
                swap = 1;  // swap with left child
            } else if (h->cmp(h->data + s_i, h->data + r_i) == 1) {
                // only right child is smaller
                swap = 2;  // swap with right child
            }
        } else {
            if (h->cmp(h->data + s_i, h->data + l_i) == 1)
                swap = 1;  // swap with left child
        }
    }
    switch (swap) {
        case 0:  // do nothing
            break;
        case 1:  // swap with left child
            h->data[l_i] = parent;
            h->data[s_i] = l;
            Heap_sort_from_top(h, l_i);
            break;
        case 2:  // swap with right child
            h->data[r_i] = parent;
            h->data[s_i] = r;
            Heap_sort_from_top(h, r_i);
            break;
        default:
            break;
    }
    return 0;
}
int Heap_push(Heap* this, Node new_val) {
    if (this->n + 1 == this->cap) Heap_realloc(this, this->cap * 2);
    this->n++;
    this->data[this->n] = new_val;
    if (this->n == 1) return 0;
    Heap_sort_from_bottom(this, this->n);
    return 0;
}
Node Heap_pop(Heap* this) {
    Node top_val = this->data[1];
    this->data[1] = this->data[this->n];
    this->n--;
    if (this->n == 0) return top_val;
    Heap_sort_from_top(this, 1);
    return top_val;
}
int Heap_realloc(Heap* this, int new_cap) {
    if (new_cap <= this->cap) return 0;
    this->cap = new_cap;
    Node* temp = this->data;
    this->data = (Node*)malloc(sizeof(Node) * new_cap);
    for (int i = 0; i < this->n; i++) this->data[i] = temp[i];
    if (temp != NULL) free(temp);
    return 0;
}