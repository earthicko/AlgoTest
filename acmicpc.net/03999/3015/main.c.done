#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 500000
typedef struct Item {
    int h, streak;
} Item;
typedef struct Stack {
    int n, cap;
    Item* items;
} Stack;
Stack* Stack__init__(int cap_);
int Stack__del__(Stack* del);
int Stack_resize(Stack* this, int cap_);
int Stack_push(Stack* this, Item new);
Item Stack_pop(Stack* this);
Item Stack_peek(Stack* this);
int N;
int main() {
    scanf("%d", &N);
    Stack* s = Stack__init__(N_MAX);
    long long result = 0;
    for (int i = 0; i < N; i++) {
        int h;
        scanf("%d", &h);
        while (s->n > 0 && Stack_peek(s).h < h) {
            Item top = Stack_pop(s);
            result += top.streak;
        }
        if (s->n == 0) {
            Item pushed = {h, 1};
            Stack_push(s, pushed);
        } else {
            if (Stack_peek(s).h == h) {
                Item top = Stack_pop(s);
                result += top.streak;
                if (s->n > 0) result++;
                top.streak++;
                Stack_push(s, top);
            } else {
                Item pushed = {h, 1};
                Stack_push(s, pushed);
                result++;
            }
        }
    }
    printf("%lld\n", result);
    return 0;
}
Stack* Stack__init__(int cap_) {
    Stack* new = (Stack*)malloc(sizeof(Stack));
    new->n = 0;
    new->cap = cap_;
    new->items = (Item*)malloc(sizeof(Item) * cap_);
    return new;
}
int Stack__del__(Stack* del) {
    free(del->items);
    free(del);
    return 0;
}
int Stack_resize(Stack* this, int cap_) {
    Item* temp = this->items;
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    int copy_max = (this->n < cap_) ? this->n : cap_;
    for (int i = 0; i < copy_max; i++) this->items[i] = temp[i];
    free(temp);
    return 0;
}
int Stack_push(Stack* this, Item new) {
    if (this->n == this->cap) Stack_resize(this, this->cap * 2);
    this->items[this->n++] = new;
    return 0;
}
Item Stack_pop(Stack* this) {
    assert(this->n > 0);
    Item output = this->items[this->n-- - 1];
    return output;
}
Item Stack_peek(Stack* this) {
    assert(this->n > 0);
    return this->items[this->n - 1];
}