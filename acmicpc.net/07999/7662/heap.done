#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 1000001

typedef struct Node {
    int val, i;
} Node;
typedef struct Heap {
    int (*cmp)(Node*, Node*);
    int n;
    int cap;
    Node* data;
} Heap;
Heap* Heap__init__(int cap_, int (*cmp_)(Node*, Node*));
int Heap__del__(Heap* this);
int Node_min_cmp(Node* a, Node* b);
int Node_max_cmp(Node* a, Node* b);
int Heap_sort_from_bottom(Heap* this, int start_index);
int Heap_sort_from_top(Heap* this, int start_index);
int Heap_push(Heap* this, Node new_val);
Node Heap_pop(Heap* this);
int Heap_remove(Heap* this, Node val);
int Heap_realloc(Heap* this, int new_cap);

int IN_HEAP[N_MAX];

int main() {
    int T;
    scanf("%d", &T);
    for (int t = 0; t < T; t++) {
        Heap* min_heap = Heap__init__(N_MAX, Node_min_cmp);
        Heap* max_heap = Heap__init__(N_MAX, Node_max_cmp);
        int K;
        scanf("%d", &K);
        for (int k = 0; k < K; k++) {
            char command;
            int value;
            scanf(" %c %d", &command, &value);
            if (command == 'I') {
                Node node = {value, k};
                Heap_push(min_heap, node);
                Heap_push(max_heap, node);
                IN_HEAP[k] = 1;
            }
            if (command == 'D') {
                if (value == 1) {
                    while (max_heap->n > 0 && IN_HEAP[max_heap->data[1].i] == 0)
                        Heap_pop(max_heap);
                    if (max_heap->n > 0) {
                        Node node = Heap_pop(max_heap);
                        IN_HEAP[node.i] = 0;
                    }
                }
                if (value == -1) {
                    while (min_heap->n > 0 && IN_HEAP[min_heap->data[1].i] == 0)
                        Heap_pop(min_heap);
                    if (min_heap->n > 0) {
                        Node node = Heap_pop(min_heap);
                        IN_HEAP[node.i] = 0;
                    }
                }
            }
        }
        while (max_heap->n > 0 && IN_HEAP[max_heap->data[1].i] == 0)
            Heap_pop(max_heap);
        while (min_heap->n > 0 && IN_HEAP[min_heap->data[1].i] == 0)
            Heap_pop(min_heap);

        if (min_heap->n == 0 || max_heap->n == 0)
            printf("EMPTY\n");
        else
            printf("%d %d\n", max_heap->data[1].val, min_heap->data[1].val);

        for (int k = 0; k < K; k++) IN_HEAP[k] = 0;
        Heap__del__(min_heap);
        Heap__del__(max_heap);
    }
    return 0;
}

Heap* Heap__init__(int cap_, int (*cmp_)(Node*, Node*)) {
    Heap* new = (Heap*)malloc(sizeof(Heap));
    new->cmp = cmp_;
    new->n = 0;
    new->cap = cap_;
    new->data = (Node*)malloc(sizeof(Node) * cap_);
    return new;
}
int Heap__del__(Heap* this) {
    free(this->data);
    free(this);
    return 0;
}
int Node_min_cmp(Node* a, Node* b) {
    // a > b => 1, a == b => 0, a < b => -1
    if (a->val > b->val) return 1;
    if (a->val == b->val) return 0;
    return -1;
}
int Node_max_cmp(Node* a, Node* b) {
    // a < b => 1, a == b => 0, a > b => -1
    if (a->val < b->val) return 1;
    if (a->val == b->val) return 0;
    return -1;
}
int Heap_sort_from_bottom(Heap* this, int s_i) {
    if (s_i == 1) return 0;
    int parent_idx = s_i / 2;
    if (this->cmp(this->data + parent_idx, this->data + s_i) == 1) {
        // parent is bigger -> swap
        Node temp = this->data[parent_idx];
        this->data[parent_idx] = this->data[s_i];
        this->data[s_i] = temp;
        Heap_sort_from_bottom(this, parent_idx);
    }
    return 0;
}
int Heap_sort_from_top(Heap* h, int s_i) {
    int l_i = s_i * 2;
    int r_i = s_i * 2 + 1;

    Node parent, l, r;

    char swap = 0;
    if (l_i <= h->n) {
        // left child exists
        parent = h->data[s_i];
        l = h->data[l_i];
        if (r_i <= h->n) {  // right child exists
            r = h->data[r_i];
            if (h->cmp(h->data + s_i, h->data + l_i) == 1 &&
                h->cmp(h->data + s_i, h->data + r_i) == 1) {
                // both children are smaller
                if (h->cmp(h->data + r_i, h->data + l_i) >= 0)
                    swap = 1;  // swap with left child
                else
                    swap = 2;  // swap with right child
            } else if (h->cmp(h->data + s_i, h->data + l_i) == 1) {
                // only left child is smaller
                swap = 1;  // swap with left child
            } else if (h->cmp(h->data + s_i, h->data + r_i) == 1) {
                // only right child is smaller
                swap = 2;  // swap with right child
            }
        } else {
            if (h->cmp(h->data + s_i, h->data + l_i) == 1)
                swap = 1;  // swap with left child
        }
    }
    switch (swap) {
        case 0:  // do nothing
            break;
        case 1:  // swap with left child
            h->data[l_i] = parent;
            h->data[s_i] = l;
            Heap_sort_from_top(h, l_i);
            break;
        case 2:  // swap with right child
            h->data[r_i] = parent;
            h->data[s_i] = r;
            Heap_sort_from_top(h, r_i);
            break;
        default:
            break;
    }
    return 0;
}
int Heap_push(Heap* this, Node new_val) {
    if (this->n + 1 == this->cap) Heap_realloc(this, this->cap * 2);
    this->n++;
    this->data[this->n] = new_val;
    if (this->n == 1) return 0;
    Heap_sort_from_bottom(this, this->n);
    return 0;
}
Node Heap_pop(Heap* this) {
    Node top_val = this->data[1];
    this->data[1] = this->data[this->n];
    this->n--;
    if (this->n == 0) return top_val;
    Heap_sort_from_top(this, 1);
    return top_val;
}
int Heap_find(Heap* this, int from, Node val) {
    if (this->cmp(this->data + from, &val) == 0) return from;
    int l_i = from * 2;
    int r_i = from * 2 + 1;
    if (l_i <= this->n && this->cmp(this->data + l_i, &val) <= 0) {
        int res = Heap_find(this, l_i, val);
        if (res != -1) return res;
    }
    if (r_i <= this->n && this->cmp(this->data + r_i, &val) <= 0) {
        int res = Heap_find(this, r_i, val);
        if (res != -1) return res;
    }
    return -1;
}
int Heap_remove(Heap* this, Node val) {
    int from = Heap_find(this, 1, val);
    if (from == -1) return -1;
    Node top_val = this->data[from];
    this->data[from] = this->data[this->n];
    this->n--;
    if (this->n == 0) return 0;
    Heap_sort_from_top(this, from);
    return 0;
}
int Heap_realloc(Heap* this, int new_cap) {
    if (new_cap <= this->cap) return 0;
    this->cap = new_cap;
    Node* temp = this->data;
    this->data = (Node*)malloc(sizeof(Node) * new_cap);
    for (int i = 0; i < this->n; i++) this->data[i] = temp[i];
    if (temp != NULL) free(temp);
    return 0;
}