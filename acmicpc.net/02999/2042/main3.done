#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 1000000
typedef long long ll;
typedef struct node {
    int s, e;
    ll val;
} node;
node *tree;
ll numbers[N_MAX];

int fill_tree(int node_i, int s, int e);
int update_tree(int node_i, ll new_val);
ll get_sum(int node_i, int scope_s, int scope_e);

int main() {
    int N, M, K;
    scanf("%d %d %d", &N, &M, &K);
    int h_tree = ceil(log2(N));
    tree = malloc(sizeof(node) * (1 << (h_tree + 1)));
    for (int n = 0; n < N; n++) scanf("%lld", &numbers[n]);
    fill_tree(1, 0, N);

    for (int i = 0; i < M + K; i++) {
        int a, b;
        ll c;
        scanf("%d %d %lld", &a, &b, &c);
        if (a == 1) {
            update_tree(b - 1, c);
        } else if (a == 2) {
            printf("%lld\n", get_sum(1, b - 1, c));
        }
    }
    return 0;
}

int fill_tree(int node_i, int s, int e) {
    tree[node_i].s = s;
    tree[node_i].e = e;
    if (s + 1 == e) {
        tree[node_i].val = numbers[s];
        return 0;
    }
    int mid = (s + e) / 2;
    fill_tree(2 * node_i, s, mid);
    fill_tree(2 * node_i + 1, mid, e);
    tree[node_i].val = tree[node_i * 2].val + tree[node_i * 2 + 1].val;
    return 0;
}

int update_tree_(int node_i, int num_i, ll diff) {
    if (!(num_i >= tree[node_i].s && num_i < tree[node_i].e)) return -1;
    tree[node_i].val += diff;
    if (tree[node_i].s + 1 == tree[node_i].e) return 0;
    update_tree_(node_i * 2, num_i, diff);
    update_tree_(node_i * 2 + 1, num_i, diff);
    return 0;
}

int update_tree(int node_i, ll new_val) {
    ll diff = new_val - numbers[node_i];
    numbers[node_i] = new_val;
    update_tree_(1, node_i, diff);
    return 0;
}

ll get_sum(int node_i, int scope_s, int scope_e) {
    if (tree[node_i].e <= scope_s || scope_e <= tree[node_i].s) return 0;
    if (scope_s <= tree[node_i].s && tree[node_i].e <= scope_e)
        return tree[node_i].val;
    return get_sum(node_i * 2, scope_s, scope_e) +
           get_sum(node_i * 2 + 1, scope_s, scope_e);
}