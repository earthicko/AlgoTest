#include <cstring>
#include <iostream>

const int maxk = 9;
int k;
char comparators[maxk];
int nums[maxk + 1];
int numsUsed[10];

void printNums(void)
{
    for (int i = 0; i < k + 1; i++)
        std::cout << nums[i];
    std::cout << "\n";
}

bool findNum(int idx, int dir)
{
    if (idx == k + 1) {
        printNums();
        return (true);
    }
    if (idx == 0) {
        // try everything
        if (dir > 0) {
            // towards 0
            for (int digit = 9; digit >= 0; digit--) {
                nums[idx] = digit;
                numsUsed[digit] = 1;
                if (findNum(idx + 1, dir))
                    return (true);
                numsUsed[digit] = 0;
            }
        } else {
            // towards 9
            for (int digit = 0; digit <= 9; digit++) {
                nums[idx] = digit;
                numsUsed[digit] = 1;
                if (findNum(idx + 1, dir))
                    return (true);
                numsUsed[digit] = 0;
            }
        }
    } else {
        if (comparators[idx - 1] == '<') {
            // right is bigger
            if (dir > 0) {
                // towards 0
                for (int digit = 9; digit >= nums[idx - 1] + 1; digit--) {
                    if (numsUsed[digit])
                        continue;
                    nums[idx] = digit;
                    numsUsed[digit] = 1;
                    if (findNum(idx + 1, dir))
                        return (true);
                    numsUsed[digit] = 0;
                }
            } else {
                // towards 9
                for (int digit = nums[idx - 1] + 1; digit <= 9; digit++) {
                    if (numsUsed[digit])
                        continue;
                    nums[idx] = digit;
                    numsUsed[digit] = 1;
                    if (findNum(idx + 1, dir))
                        return (true);
                    numsUsed[digit] = 0;
                }
            }
        } else {
            // left is bigger
            if (dir > 0) {
                // towards 0
                for (int digit = nums[idx - 1] - 1; digit >= 0; digit--) {
                    if (numsUsed[digit])
                        continue;
                    nums[idx] = digit;
                    numsUsed[digit] = 1;
                    if (findNum(idx + 1, dir))
                        return (true);
                    numsUsed[digit] = 0;
                }
            } else {
                // towards 9
                for (int digit = 0; digit <= nums[idx - 1] - 1; digit++) {
                    if (numsUsed[digit])
                        continue;
                    nums[idx] = digit;
                    numsUsed[digit] = 1;
                    if (findNum(idx + 1, dir))
                        return (true);
                    numsUsed[digit] = 0;
                }
            }
        }
    }
    return (false);
}

int main(void)
{
    std::cin >> k;
    for (int i = 0; i < k; i++)
        std::cin >> comparators[i];
    findNum(0, +1);
    memset(nums, 0, sizeof(nums));
    memset(numsUsed, 0, sizeof(numsUsed));
    findNum(0, -1);
    return (0);
}
