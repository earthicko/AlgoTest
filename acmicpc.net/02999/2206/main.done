#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 1000
#define INF __INT32_MAX__
typedef struct Item {
    int r, c, count;
} Item;
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

int N, M, MIN_D_TO_END;
int MAP[N_MAX][N_MAX], VISITED[2][N_MAX][N_MAX], MIN_D[2][N_MAX][N_MAX];
Item dir[4] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

int do_bfs();

int main() {
    scanf("%d %d", &N, &M);

    for (int r = 0; r < N; r++)
        for (int c = 0; c < M; c++) {
            scanf("%1d", &MAP[r][c]);
            MIN_D[0][r][c] = INF;
            MIN_D[1][r][c] = INF;
        }

    do_bfs();

    MIN_D_TO_END = (MIN_D[0][N - 1][M - 1] < MIN_D[1][N - 1][M - 1])
                       ? MIN_D[0][N - 1][M - 1]
                       : MIN_D[1][N - 1][M - 1];

    if (MIN_D_TO_END == INF)
        printf("-1");
    else
        printf("%d", MIN_D_TO_END);

    return 0;
}

int do_bfs() {
    int done[2] = {0, 0};
    Queue* q = Queue__init__(2 * N * M + 2);
    Item start = {0, 0, 0};
    MIN_D[0][0][0] = 1;
    MIN_D[1][0][0] = 1;

    Queue_push(q, start);

    while (q->n > 0) {
        Item h = Queue_pop(q);
        if (h.r == N - 1 && h.c == M - 1) done[h.count] = 1;
        if (done[0] == 1 && done[1] == 1) break;

        for (int i = 0; i < 4; i++) {
            Item t = {h.r + dir[i].r, h.c + dir[i].c, h.count};
            if (t.r < 0 || t.r >= N || t.c < 0 || t.c >= M) continue;

            if (MAP[t.r][t.c] == 0) {
                if (VISITED[t.count][t.r][t.c]) continue;
                VISITED[t.count][t.r][t.c] = 1;

                int new_d = MIN_D[h.count][h.r][h.c] + 1;
                if (MIN_D[t.count][t.r][t.c] > new_d) {
                    MIN_D[t.count][t.r][t.c] = new_d;
                    Queue_push(q, t);
                }
            } else {
                if (h.count == 1) continue;
                t.count = 1;

                if (VISITED[t.count][t.r][t.c]) continue;
                VISITED[t.count][t.r][t.c] = 1;

                int new_d = MIN_D[h.count][h.r][h.c] + 1;
                if (MIN_D[t.count][t.r][t.c] > new_d) {
                    MIN_D[t.count][t.r][t.c] = new_d;
                    Queue_push(q, t);
                }
            }
        }
    }
    Queue__del__(q);
    return 0;
}

Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}