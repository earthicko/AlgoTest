#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>

// #define _DEBUG
#ifdef _DEBUG
#define PRINTF(...) printf(__VA_ARGS__)
#else
#define PRINTF(...)
#endif

enum e_area
{
	FILLED = -1,
	UNVISITED = 0,
};

typedef struct coord_s
{
	int x;
	int y;
} coord_t;

const int maxn = 100;

int height, width, nRect;
int board[maxn][maxn];
std::vector<int> areas;

coord_t operator+(const coord_t &a, const coord_t &b)
{
	coord_t ret = {a.x + b.x, a.y + b.y};
	return (ret);
}

void printBoard(void)
{
	for (int y = height - 1; y >= 0; y--)
	{
		for (int x = 0; x < width; x++)
		{
			PRINTF("%2d ", board[x][y]);
		}
		PRINTF("\n");
	}
}

bool oob(const coord_t &c)
{
	if (c.x < 0 || c.x >= width || c.y < 0 || c.y >= height)
		return (true);
	return (false);
}

int getCoordVal(const coord_t &c)
{
	return (board[c.x][c.y]);
}

void setCoordVal(const coord_t &c, int val)
{
	board[c.x][c.y] = val;
}

void fillFrom(int x, int y, int idx)
{
	static const coord_t dirs[4] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
	std::queue<coord_t> willVisit;
	coord_t firstCoord = {x, y};
	setCoordVal(firstCoord, idx);
	willVisit.push(firstCoord);
	int counter = 1;
	while (!willVisit.empty())
	{
		coord_t currCoord = willVisit.front();
		willVisit.pop();
		for (int i = 0; i < 4; i++)
		{
			coord_t nextCoord = currCoord + dirs[i];
			if (oob(nextCoord))
				continue;
			int val = getCoordVal(nextCoord);
			if (val != UNVISITED)
				continue;
			setCoordVal(nextCoord, idx);
			willVisit.push(nextCoord);
			counter++;
		}
	}
	areas.push_back(counter);
}

int fillAll(void)
{
	int count = 0;
	for (int x = 0; x < width; x++)
	{
		for (int y = 0; y < height; y++)
		{
			if (board[x][y] == UNVISITED)
			{
				count++;
				PRINTF("Fill from (%d, %d), %d\n", x, y, count);
				fillFrom(x, y, count);
				printBoard();
			}
		}
	}
	return (count);
}

int main(void)
{
	std::cin >> height >> width >> nRect;
	for (int i = 0; i < nRect; i++)
	{
		int xmin, ymin, xmax, ymax;
		std::cin >> xmin >> ymin >> xmax >> ymax;
		for (int x = xmin; x < xmax; x++)
		{
			for (int y = ymin; y < ymax; y++)
			{
				board[x][y] = FILLED;
			}
		}
	}
	printBoard();
	int count = fillAll();
	printf("%d\n", count);
	std::sort(areas.begin(), areas.end());
	for (std::vector<int>::iterator it = areas.begin(); it != areas.end(); it++)
		printf("%d ", *it);
	printf("\n");
	return (0);
}
