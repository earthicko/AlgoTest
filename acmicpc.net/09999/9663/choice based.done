#include <stdio.h>
#include <string.h>
#define N_MAX 14

typedef struct chess {
    int choice[N_MAX];
    int set_choice;
} chess;

int N;
int COUNTER = 0;

int do_dfs(chess state, int depth);

int main() {
    scanf("%d", &N);
    chess empty;
    for (int i = 0; i < N; i++) empty.choice[i] = -1;
    empty.set_choice = 0;
    do_dfs(empty, 0);
    printf("%d", COUNTER);
    return 0;
}

int do_dfs(chess state, int depth) {
    if (depth == N) {
        COUNTER++;
        return 0;
    }
    for (int i = 0; i < N; i++) {
        // make choice of [depth]
        if (state.set_choice & (1 << i)) continue;
        // new choice (depth, i)
        int abort = 0;
        for (int d = 1; d < N; d++) {
            int r_l = depth - d, r_r = depth + d;
            int c_l = i - d, c_r = i + d;
            if ((0 <= r_l && 0 <= c_l && state.choice[r_l] == c_l) ||
                (0 <= r_l && c_r < N && state.choice[r_l] == c_r) ||
                (r_r < N && 0 <= c_l && state.choice[r_r] == c_l) ||
                (r_r < N && c_r < N && state.choice[r_r] == c_r)) {
                abort = 1;
                break;
            }
        }
        if (abort) continue;
        chess new;
        memcpy(&new, &state, sizeof(chess));
        new.choice[depth] = i;
        new.set_choice |= (1 << i);
        do_dfs(new, depth + 1);
    }
    return 0;
}
