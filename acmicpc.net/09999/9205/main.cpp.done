#include <iostream>
#include <vector>
#include <queue>

typedef struct coord_s
{
	int r;
	int c;
} coord_t;

int dist(const coord_t &a, const coord_t &b)
{
	return (std::abs(a.r - b.r) + std::abs(a.c - b.c));
}

bool canReach(std::vector<coord_t> &nodes, std::vector<bool> &visited)
{
	int nNodes = nodes.size();
	std::queue<int> willvisit;
	willvisit.push(0);
	visited[0] = true;
	while (!willvisit.empty())
	{
		int here = willvisit.front();
		willvisit.pop();
		for (int i = nNodes - 1; i > 0; i--)
		{
			if (dist(nodes[here], nodes[i]) > 1000)
				continue;
			if (i == nNodes - 1)
				return (true);
			if (visited[i])
				continue;
			visited[i] = true;
			willvisit.push(i);
		}
	}
	return (false);
}

int main(void)
{
	int t;
	std::cin >> t;
	for (int i = 0; i < t; i++)
	{
		coord_t home;
		coord_t end;
		int n;
		std::cin >> n;
		std::cin >> home.r >> home.c;
		std::vector<coord_t> nodes;
		std::vector<bool> visited(n + 2, false);
		nodes.push_back(home);
		for (int j = 0; j < n; j++)
		{
			coord_t node;
			std::cin >> node.r >> node.c;
			nodes.push_back(node);
		}
		std::cin >> end.r >> end.c;
		nodes.push_back(end);
		if (canReach(nodes, visited))
			std::cout << "happy" << std::endl;
		else
			std::cout << "sad" << std::endl;
	}
	return (0);
}
