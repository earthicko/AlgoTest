#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define D_MAX 10000
#define INF __INT32_MAX__

typedef int Item;
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

int T, A, B;
int MIN_TRIES[D_MAX], VISITED[D_MAX];
char PREV_COMMAND[D_MAX];
int PREV_TRACE[D_MAX];

int D(int s);
int S(int s);
int L(int s);
int R(int s);
int (*funcs[4])(int) = {D, S, L, R};
char func_names[4] = {'D', 'S', 'L', 'R'};

int min_tries(int s, int e);
int trace(int s, int e, int n_max);

int main() {
    scanf("%d", &T);
    for (int t = 0; t < T; t++) {
        scanf("%d %d", &A, &B);
        min_tries(A, B);
        trace(A, B, MIN_TRIES[B]);
    }
    return 0;
}

int min_tries(int s, int e) {
    for (int i = 0; i < D_MAX; i++) {
        MIN_TRIES[i] = INF;
        VISITED[i] = 0;
        PREV_COMMAND[i] = 0;
        PREV_TRACE[i] = -1;
    }
    Queue* q = Queue__init__(D_MAX + 2);
    MIN_TRIES[s] = 0;
    Queue_push(q, s);

    while (q->n > 0) {
        Item here = Queue_pop(q);
        assert(MIN_TRIES[here] < D_MAX);
        for (int i = 0; i < 4; i++) {
            Item there = funcs[i](here);
            if (there == here) continue;
            if (VISITED[there]) continue;
            if (MIN_TRIES[here] + 1 < MIN_TRIES[there]) {
                MIN_TRIES[there] = MIN_TRIES[here] + 1;
                Queue_push(q, there);
                PREV_COMMAND[there] = func_names[i];
                PREV_TRACE[there] = here;
            }
        }
        VISITED[here] = 1;
        if (here == e) break;
    }
    Queue__del__(q);

    return 0;
}

int trace(int s, int e, int n_max) {
    char commands[D_MAX];
    int n_commands = 0;
    while (s != e) {
        commands[n_commands] = PREV_COMMAND[e];
        n_commands++;
        e = PREV_TRACE[e];
        assert(n_commands <= n_max);
    }

    for (int i = n_commands - 1; i >= 0; i--) printf("%c", commands[i]);
    printf("\n");
    return 0;
}

int D(int s) { return (s * 2) % 10000; }
int S(int s) {
    s--;
    if (s == -1) return 9999;
    return s;
}
int L(int s) {
    int top = s / 1000;
    s = ((s * 10) % 10000) + top;
    return s;
}
int R(int s) {
    int bottom = s % 10;
    s = (s / 10) + bottom * 1000;
    return s;
}

Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}