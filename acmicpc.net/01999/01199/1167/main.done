#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct Item {
    int e, d;
} Item;
typedef struct List {
    int n, cap;
    Item* items;
} List;
List* List__init__(int cap_);
int List__del__(List* del);
int List_resize(List* this, int cap_);
int List_append(List* this, Item new);

typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

#define V_MAX 100000

int V;
List* EDGE[V_MAX];

int find_farthest(int start, int* output_ist);

int main() {
    scanf("%d", &V);
    for (int v = 0; v < V; v++) EDGE[v] = List__init__(3);

    for (int v = 0; v < V; v++) {
        int s, e, d;
        scanf("%d", &s);
        s--;
        while (1) {
            scanf("%d", &e);
            if (e == -1) break;
            scanf("%d", &d);
            e--;
            Item edge = {e, d};
            List_append(EDGE[s], edge);
        }
    }
    int d;
    int left = find_farthest(0, &d);
    int right = find_farthest(left, &d);
    printf("%d", d);

    return 0;
}

int find_farthest(int start, int* output_dist) {
    int visited[V_MAX], dist[V_MAX];
    for (int i = 0; i < V; i++) visited[i] = 0, dist[i] = 0;

    int max_d = 0, max_i;

    Queue* q = Queue__init__(V + 2);
    Item s = {start, 0};
    visited[start] = 1;
    Queue_push(q, s);

    while (q->n > 0) {
        Item here = Queue_pop(q);
        for (int i = 0; i < EDGE[here.e]->n; i++) {
            Item there = EDGE[here.e]->items[i];
            if (visited[there.e]) continue;

            visited[there.e] = 1;
            dist[there.e] = dist[here.e] + there.d;

            if (dist[there.e] > max_d) {
                max_d = dist[there.e];
                max_i = there.e;
            }
            Queue_push(q, there);
        }
    }
    Queue__del__(q);
    *output_dist = max_d;
    return max_i;
}

List* List__init__(int cap_) {
    List* new = (List*)malloc(sizeof(List));
    new->n = 0;
    new->cap = cap_;
    new->items = (Item*)malloc(sizeof(Item) * cap_);
    return new;
}
int List__del__(List* del) {
    free(del->items);
    free(del);
    return 0;
}
int List_resize(List* this, int cap_) {
    Item* temp = this->items;
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = temp[i];
    free(temp);
    this->cap = cap_;
    return 0;
}
int List_append(List* this, Item new) {
    if (this->n == this->cap) List_resize(this, this->cap * 2);
    this->items[this->n] = new;
    this->n++;
    return 0;
}

Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}