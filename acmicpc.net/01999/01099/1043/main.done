#include <stdio.h>
#define N_MAX 50

int N_PEOPLE, N_PARTY;
int PARENT[N_MAX], LEVEL[N_MAX];
int PEOPLE_PARTY[N_MAX][N_MAX];
int N_PEOPLE_PARTY[N_MAX];
int PEOPLE_KNOWING[N_MAX];
int N_PEOPLE_KNOWING;

int find_root(int u);
int merge(int u, int v);

int main() {
    scanf("%d %d", &N_PEOPLE, &N_PARTY);

    for (int i = 0; i < N_PEOPLE; i++) {
        PARENT[i] = i;
        LEVEL[i] = 1;
    }

    scanf("%d", &N_PEOPLE_KNOWING);
    for (int i = 0; i < N_PEOPLE_KNOWING; i++) {
        scanf("%d", &PEOPLE_KNOWING[i]);
        PEOPLE_KNOWING[i]--;
    }
    for (int i = 0; i < N_PARTY; i++) {
        scanf("%d", &N_PEOPLE_PARTY[i]);
        scanf("%d", &PEOPLE_PARTY[i][0]);
        PEOPLE_PARTY[i][0]--;
        for (int j = 1; j < N_PEOPLE_PARTY[i]; j++) {
            scanf("%d", &PEOPLE_PARTY[i][j]);
            PEOPLE_PARTY[i][j]--;
            merge(PEOPLE_PARTY[i][0], PEOPLE_PARTY[i][j]);
        }
    }
    int n_liable_party = 0;
    for (int i = 0; i < N_PARTY; i++) {
        int parent_this_party = find_root(PEOPLE_PARTY[i][0]);
        int can_lie = 1;
        for (int j = 0; j < N_PEOPLE_KNOWING; j++) {
            if (parent_this_party == find_root(PEOPLE_KNOWING[j])) {
                can_lie = 0;
                break;
            }
        }
        if (can_lie) n_liable_party++;
    }
    printf("%d", n_liable_party);
    return 0;
}

int find_root(int u) {
    if (PARENT[u] == u) return u;
    return find_root(PARENT[u]);
}
int merge(int u, int v) {
    int p_u = find_root(u);
    int p_v = find_root(v);
    if (p_u == p_v) return 0;
    if (LEVEL[p_u] > LEVEL[p_v]) {
        int temp = p_u;
        p_u = p_v;
        p_v = temp;
    }
    PARENT[p_u] = p_v;
    if (LEVEL[p_u] == LEVEL[p_v]) LEVEL[p_v]++;
    return 0;
}