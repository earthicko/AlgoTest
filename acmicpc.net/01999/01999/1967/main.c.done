#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 10000
#define INF __INT32_MAX__
typedef struct Item {
    int idx, dist;
} Item;
typedef struct List {
    int n, cap;
    Item* items;
} List;
List* List__init__(int cap_);
int List__del__(List* del);
int List_resize(List* this, int cap_);
int List_append(List* this, Item new);
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

int N;
List* E[N_MAX];

int find_farthest(int s, int* output_e);

int main() {
    scanf("%d", &N);
    if (N == 1) {
        printf("0");
        return 0;
    }
    for (int i = 0; i < N; i++) E[i] = List__init__(3);
    for (int i = 0; i < N - 1; i++) {
        int s, e, d;
        scanf("%d %d %d", &s, &e, &d);
        s--;
        e--;
        Item edge_se = {e, d};
        Item edge_es = {s, d};
        List_append(E[s], edge_se);
        List_append(E[e], edge_es);
    }
    int left;
    find_farthest(0, &left);
    int right;
    int diameter = find_farthest(left, &right);
    printf("%d\n", diameter);
    return 0;
}

int find_farthest(int s, int* output_e) {
    int visited[N_MAX], max_d[N_MAX];
    for (int i = 0; i < N; i++) {
        visited[i] = 0;
        max_d[i] = 0;
    }

    int max_depth = 0, max_i;

    Queue* q = Queue__init__(N + 2);
    Item start = {s, 0};
    Queue_push(q, start);
    while (q->n > 0) {
        Item here = Queue_pop(q);
        // printf("From %d\n", here.idx);
        for (int i = 0; i < E[here.idx]->n; i++) {
            Item there = {E[here.idx]->items[i].idx,
                          E[here.idx]->items[i].dist};
            if (visited[there.idx]) continue;
            // printf("Visit %d\n", there.idx);
            max_d[there.idx] = max_d[here.idx] + there.dist;
            if (max_depth < max_d[there.idx]) {
                max_depth = max_d[there.idx];
                max_i = there.idx;
            }
            Queue_push(q, there);
        }
        visited[here.idx] = 1;
    }
    Queue__del__(q);

    *output_e = max_i;
    return max_depth;
}

List* List__init__(int cap_) {
    List* new = (List*)malloc(sizeof(List));
    new->n = 0;
    new->cap = cap_;
    new->items = (Item*)malloc(sizeof(Item) * cap_);
    return new;
}
int List__del__(List* del) {
    free(del->items);
    free(del);
    return 0;
}
int List_resize(List* this, int cap_) {
    Item* temp = this->items;
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = temp[i];
    free(temp);
    this->cap = cap_;
    return 0;
}
int List_append(List* this, Item new) {
    if (this->n == this->cap) List_resize(this, this->cap * 2);
    this->items[this->n] = new;
    this->n++;
    return 0;
}
Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}