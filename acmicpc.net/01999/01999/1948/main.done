#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#define N_MAX 10001
#define M_MAX 100000

typedef struct road {
    int e, d;
} road;
typedef road Item;
typedef struct List {
    int n, cap;
    Item* items;
} List;
List* List__init__(int cap_);
int List__del__(List* del);
int List_resize(List* this, int cap_);
int List_append(List* this, Item new);
typedef struct Queue {
    int n, cap, head;
    Item* items;
} Queue;
Queue* Queue__init__(int cap_);
int Queue__del__(Queue* this);
int Queue_push(Queue* this, Item item);
Item Queue_pop(Queue* this);
int Queue_resize(Queue* this, int cap_);

int N, M, FROM, TO;
int IN_DEGREE[N_MAX];
int VISITED[N_MAX];
int MAX_D[N_MAX];
int PREV[N_MAX];
List *ROADS[M_MAX], *ROADS_REV[M_MAX];
int MAX_D_TO_DEST, N_CRITICAL_PATHS;

int build_max_d_array(int s);
int count_critical_paths(int e);

int main() {
    scanf("%d%d", &N, &M);
    for (int n = 1; n <= N; n++) {
        ROADS[n] = List__init__(10);
        ROADS_REV[n] = List__init__(10);
    }
    for (int m = 0; m < M; m++) {
        int s, e, d;
        scanf("%d %d %d", &s, &e, &d);
        road new_road = {e, d};
        road new_road_rev = {s, d};
        IN_DEGREE[e]++;
        List_append(ROADS[s], new_road);
        List_append(ROADS_REV[e], new_road_rev);
    }
    scanf("%d %d", &FROM, &TO);
    build_max_d_array(FROM);
    MAX_D_TO_DEST = MAX_D[TO];
    count_critical_paths(TO);
    printf("%d\n%d\n", MAX_D_TO_DEST, N_CRITICAL_PATHS);

    return 0;
}

int build_max_d_array(int s) {
    Queue* queue = Queue__init__(N_MAX);
    Item start = {s, 0};
    Queue_push(queue, start);
    for (int i = 0; i < N; i++) {
        Item here = Queue_pop(queue);
        for (int i = 0; i < ROADS[here.e]->n; i++) {
            Item there = ROADS[here.e]->items[i];
            IN_DEGREE[there.e]--;
            int d_if_take_route = MAX_D[here.e] + there.d;
            if (d_if_take_route > MAX_D[there.e])
                MAX_D[there.e] = d_if_take_route;
            if (IN_DEGREE[there.e] == 0) Queue_push(queue, there);
        }
    }
    Queue__del__(queue);
    return 0;
}

int count_critical_paths(int e) {
    Queue* queue = Queue__init__(N_MAX);
    Item end = {e, 0};
    Queue_push(queue, end);
    while (1) {
        Item here = Queue_pop(queue);
        if (here.e == FROM) break;
        for (int i = 0; i < ROADS_REV[here.e]->n; i++) {
            Item there = ROADS_REV[here.e]->items[i];
            if (there.d == MAX_D[here.e] - MAX_D[there.e]) {
                N_CRITICAL_PATHS++;
                if (!VISITED[there.e]) {
                    VISITED[there.e] = 1;
                    Queue_push(queue, there);
                }
            }
        }
    }
    Queue__del__(queue);
    return 0;
}

List* List__init__(int cap_) {
    List* new = (List*)malloc(sizeof(List));
    new->n = 0;
    new->cap = cap_;
    new->items = (Item*)malloc(sizeof(Item) * cap_);
    return new;
}
int List__del__(List* del) {
    free(del->items);
    free(del);
    return 0;
}
int List_resize(List* this, int cap_) {
    Item* temp = this->items;
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = temp[i];
    free(temp);
    this->cap = cap_;
    return 0;
}
int List_append(List* this, Item new) {
    if (this->n == this->cap) List_resize(this, this->cap * 2);
    this->items[this->n] = new;
    this->n++;
    return 0;
}
Queue* Queue__init__(int cap_) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->n = 0;
    queue->cap = cap_;
    queue->head = 0;
    queue->items = (Item*)malloc(sizeof(Item) * cap_);
    return queue;
}
int Queue__del__(Queue* this) {
    free(this->items);
    free(this);
    return 0;
}
int Queue_push(Queue* this, Item item) {
    // assert(this->n < this->cap);
    if (this->n == this->cap) Queue_resize(this, this->cap * 2);
    this->n++;
    this->items[(this->head + this->n) % this->cap] = item;
    return 0;
}
Item Queue_pop(Queue* this) {
    assert(this->n > 0);
    this->head = (this->head + 1) % this->cap;
    this->n--;
    return this->items[this->head];
}
int Queue_resize(Queue* this, int cap_) {
    Item* linear = (Item*)malloc(sizeof(Item) * this->n);
    for (int i = 0; i < this->n; i++)
        linear[i] = this->items[(this->head + i + 1) % this->cap];
    free(this->items);
    this->items = (Item*)malloc(sizeof(Item) * cap_);
    for (int i = 0; i < this->n; i++) this->items[i] = linear[i];
    free(linear);
    this->head = cap_ - 1;
    this->cap = cap_;
    return 0;
}