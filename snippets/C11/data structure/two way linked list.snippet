#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef int LinkedListData;
typedef struct LinkedListNode {
    LinkedListData data;
    struct LinkedListNode* left;
    struct LinkedListNode* right;
    struct List* parent;
} LinkedListNode;
typedef struct List {
    int n;
    LinkedListNode* head;
    LinkedListNode* tail;
} List;
List* List__init__();
int List__del__(List* this);
LinkedListNode* Node__init__(List* parent, LinkedListData val);
LinkedListNode* List_append(List* this, LinkedListData val);
LinkedListNode* List_insert(LinkedListNode* ref, LinkedListData val, char dir);
LinkedListNode* List_pop(List* this, int i);

List* List__init__() {
    List* constructed = (List*)malloc(sizeof(List));
    constructed->n = 0;
    constructed->head = NULL;
    constructed->tail = NULL;
    return constructed;
}
int List__del__(List* this) {
    LinkedListNode* deleted = this->head;
    while (deleted != NULL) {
        free(deleted);
        deleted = deleted->right;
    }
    free(this);
    return 0;
}
LinkedListNode* Node__init__(List* parent, LinkedListData val) {
    LinkedListNode* this = (LinkedListNode*)malloc(sizeof(LinkedListNode));
    this->data = val;
    this->left = NULL;
    this->right = NULL;
    this->parent = parent;
    return this;
}
LinkedListNode* List_append(List* this, LinkedListData val) {
    LinkedListNode* new_node = Node__init__(this, val);
    if (this->n == 0) {
        this->head = new_node;
        this->tail = new_node;
    } else {
        this->tail->right = new_node;
        new_node->left = this->tail;
        this->tail = new_node;
    }
    this->n++;
    return new_node;
}
// direction) 0: left / 1: right
LinkedListNode* List_insert(LinkedListNode* ref, LinkedListData val, char dir) {
    LinkedListNode* inserted = Node__init__(ref->parent, val);
    LinkedListNode* temp;
    inserted->parent->n++;
    if (dir) {  // right
        temp = ref->right;
        ref->right = inserted;
        inserted->left = ref;
        inserted->right = temp;
        if (temp != NULL)
            temp->left = inserted;
        else
            inserted->parent->tail = inserted;
    } else {  // left
        temp = ref->left;
        ref->left = inserted;
        inserted->right = ref;
        inserted->left = temp;
        if (temp != NULL)
            temp->right = inserted;
        else
            inserted->parent->head = inserted;
    }
    return inserted;
}
LinkedListNode* List_pop(List* this, int i) {
    assert(0 <= i && i < this->n);
    this->n--;
    LinkedListNode* popped;

    if (this->n == 0) {
        popped = this->head;
        this->head = NULL;
        this->tail = NULL;
        return popped;
    }

    if (i == 0) {
        popped = this->head;
        this->head->right->left = NULL;
        this->head = this->head->right;
    } else if (i == this->n) {
        popped = this->tail;
        this->tail->left->right = NULL;
        this->tail = this->tail->left;
    } else {
        popped = this->head;
        while (i > 0) {
            popped = popped->right;
            i--;
        }
        popped->left->right = popped->right;
        popped->right->left = popped->left;
    }
    return popped;
}